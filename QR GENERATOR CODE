# QR-code-Generator..
import tkinter as tk
from tkinter import messagebox, filedialog
import qrcode
from PIL import Image, ImageTk
 

 #CLASS QR GENERATOR
class QRCodeGenerator:
    def __init__(self, root):
        self.root = root
        self.root.title("QR Code Generator with Background")
        self.root.geometry("600x600")


        self.label = tk.Label(root, text="Enter text for QR Code:")
        self.label.pack(pady=10)
        
        self.text_entry = tk.Entry(root, width=40)
        self.text_entry.pack(pady=10)
        
        self.generate_button = tk.Button(root, text="Generate QR Code", command=self.generate_qr_code)
        self.generate_button.pack(pady=10)
        
        self.background_button = tk.Button(root, text="Insert Background Image", command=self.load_background_image)
        self.background_button.pack(pady=10)
        
        self.save_button = tk.Button(root, text="Save QR Code", state=tk.DISABLED, command=self.save_qr_code)
        self.save_button.pack(pady=10)

        self.qr_image = None
        self.background_image = None
        self.qr_code_label = None  


#BACKGROUND IMAGE
    def load_background_image(self):
        file_path = filedialog.askopenfilename(filetypes=[("Image files", "*.png;*.jpg;*.jpeg;*.bmp;*.gif")])
        if file_path:
            self.background_image = Image.open(file_path)
            messagebox.showinfo("Background Image", "Background image loaded successfully.")



#GENERATE QR
    def generate_qr_code(self):
        text = self.text_entry.get()
        if not text:
            messagebox.showwarning("Error", "Please enter some text to generate a QR code.")
            return

        if self.qr_code_label:
            self.qr_code_label.destroy()

        qr = qrcode.QRCode(version=1, error_correction=qrcode.constants.ERROR_CORRECT_L, box_size=10, border=4)
        qr.add_data(text)
        qr.make(fit=True)
        
        qr_img = qr.make_image(fill='black', back_color='white')


#OVERLAY THE QR
        if self.background_image:
            background_width, background_height = self.background_image.size
            qr_width = background_width // 4
            qr_height = background_height // 4
            qr_img = qr_img.resize((qr_width, qr_height))  

            if qr_img.mode!= 'RGBA':
                qr_img = qr_img.convert('RGBA')

            qr_x = (background_width - qr_width) // 2  
            qr_y = (background_height - qr_height) // 2  

            self.background_image.paste(qr_img, (qr_x, qr_y), qr_img)
            final_image = self.background_image
        else:
            final_image = qr_img


#DISPLAY AND SAVE
        self.qr_image = ImageTk.PhotoImage(final_image)
        self.qr_code_label = tk.Label(self.root, image=self.qr_image)
        self.qr_code_label.pack(pady=10)

        self.save_button.config(state=tk.NORMAL)


#SAVE QR CODE
    def save_qr_code(self):
        if not self.qr_image:
            messagebox.showwarning("No QR Code", "Please generate a QR code first.")
            return

        file_path = filedialog.asksaveasfilename(defaultextension=".png", filetypes=[("PNG files", "*.png")])
        if file_path:
            final_image = self.qr_image._PhotoImage__photo.convert("RGB")
            final_image.save(file_path)
            messagebox.showinfo("Save Success", f"QR Code with background saved as {file_path}")


#RUN
if __name__ == "__main__":
    root = tk.Tk()
    app = QRCodeGenerator(root)
    root.mainloop()
